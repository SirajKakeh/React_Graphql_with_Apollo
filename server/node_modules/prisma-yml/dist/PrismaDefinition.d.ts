import { PrismaDefinition } from 'prisma-json-schema';
import { Args } from './types/common';
import { Environment } from './Environment';
import { IOutput } from './Output';
import { Cluster } from './Cluster';
import { FunctionInput } from './types/rc';
export interface EnvVars {
    [key: string]: string | undefined;
}
export declare class PrismaDefinitionClass {
    definition?: PrismaDefinition;
    rawJson?: any;
    typesString?: string;
    secrets: string[] | null;
    definitionPath?: string | null;
    definitionDir: string;
    env: Environment;
    out?: IOutput;
    envVars: any;
    private definitionString;
    constructor(env: Environment, definitionPath?: string | null, envVars?: EnvVars, out?: IOutput);
    load(args: Args, envPath?: string): Promise<void>;
    readonly clusterBaseUrl: string | undefined;
    readonly service: string | undefined;
    readonly stage: string | undefined;
    readonly cluster: string | undefined;
    validate(): void;
    getToken(serviceName: string, stageName: string): string | undefined;
    getCluster(throws?: boolean): Cluster | undefined;
    getTypesString(definition: PrismaDefinition): string;
    getClusterName(): string | null;
    getWorkspace(): string | null;
    getDeployName(): string;
    getSubscriptions(): FunctionInput[];
    addCluster(cluster: string, args: any): Promise<void>;
    replaceEndpoint(newEndpoint: any): void;
    getEndpoint(serviceInput?: string, stageInput?: string): string | null;
}
export declare function concatName(cluster: Cluster, name: string, workspace: string | null): string;
export declare function parseEndpoint(endpoint: string): {
    service: string;
    clusterBaseUrl: string;
    stage: string;
    isPrivate: boolean;
    local: boolean;
    shared: boolean;
    workspaceSlug: string | undefined;
    clusterName: string;
};
export declare function getEndpoint(cluster: Cluster, service: string, stage: string, workspace?: string | null): string;
